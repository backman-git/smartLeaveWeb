// Generated by CoffeeScript 1.12.3
(function() {
  var LeaveForm, LeaveSystemSingleton, Node, People, debug, express, fs, genDate, router, sessionManager, urlToImage;

  express = require('express');

  fs = require('fs');

  Node = require("../coffee/Node");

  People = require("../coffee/People");

  LeaveForm = require("../coffee/LeaveForm");

  LeaveSystemSingleton = require('../coffee/LeaveSystemSingleton');

  sessionManager = require('../coffee/SessionManager');

  debug = require('debug')('smartLeave:mainPage');

  router = express.Router();

  router.get('/', function(req, res, next) {
    var ID, LSys, name, pFormList, pNode, pWList;
    LSys = LeaveSystemSingleton.get();
    debug("LSys:" + LSys);
    ID = req.cookies["ID"];
    name = sessionManager.getSessionName(ID);
    if (ID === sessionManager.getSessionID("假單庫")) {
      pNode = LSys.getPeopleNodeByName(name);
      pFormList = LSys.getPersonFormListByName(pNode["name"]);
      pWList = pNode.getWaitHQueue();
      debug(pWList);
      return res.render('mainPage', {
        mainScript: '../javascripts/MainUtility.js',
        name: pNode["name"],
        style: "./stylesheets/mainPage.css",
        historyList: pFormList,
        processList: pWList,
        role: "personnel"
      });
    } else {
      debug("general login");
      pNode = LSys.getPeopleNodeByName(name);
      debug("pNode:" + pNode);
      pFormList = LSys.getPersonFormListByName(pNode["name"]);
      pWList = pNode.getWaitHQueue();
      debug(pWList);
      return res.render('mainPage', {
        mainScript: '../javascripts/MainUtility.js',
        name: pNode["name"],
        style: "./stylesheets/mainPage.css",
        historyList: pFormList,
        processList: pWList,
        role: "individual"
      });
    }
  });

  router.get('/editForm', function(req, res, next) {
    var ID, LSys, form, name, pNode, state;
    LSys = LeaveSystemSingleton.get();
    ID = req.cookies["ID"];
    name = sessionManager.getSessionName(ID);
    pNode = LSys.getPeopleNodeByName(name);
    if (req.query.fID === "new") {
      debug(req.cookies["ID"]);
      return res.render('formEditor', {
        imgScript: '../javascripts/ImageUtility.js',
        mainScript: '../javascripts/MainUtility.js',
        form: "../images/form.png",
        style: "../stylesheets/editForm.css",
        team: pNode["team"],
        name: pNode["name"].replace(pNode["team"] + "-", ""),
        title: pNode["title"],
        startCareerDay: pNode["startCareerDate"],
        availableDay: "" + pNode["availableDay"],
        useDay: "" + pNode["useDay"],
        role: "individual",
        markID: req.cookies["ID"],
        fID: 0
      });
    } else {
      form = LSys.getFormByFID(req.query.fID);
      state = form.getState();
      if (state['deputy'] === false) {
        return res.render('formEditor', {
          imgScript: '../javascripts/ImageUtility.js',
          mainScript: '../javascripts/MainUtility.js',
          form: form.getImageUri(),
          style: "../stylesheets/editForm.css",
          role: "deputy",
          markID: req.cookies["ID"],
          fID: form.getFID()
        });
      } else if (form.getType() === 'short' && state['firstBoss'] === false) {
        return res.render('formEditor', {
          imgScript: '../javascripts/ImageUtility.js',
          mainScript: '../javascripts/MainUtility.js',
          form: form.getImageUri(),
          style: "../stylesheets/editForm.css",
          role: "firstBoss",
          markID: req.cookies["ID"],
          fID: form.getFID(),
          fType: form.getType()
        });
      } else if (form.getType() === "long" && state['firstBoss'] === false) {
        return res.render('formEditor', {
          imgScript: '../javascripts/ImageUtility.js',
          mainScript: '../javascripts/MainUtility.js',
          form: form.getImageUri(),
          style: "../stylesheets/editForm.css",
          role: "firstBoss",
          markID: req.cookies["ID"],
          fID: form.getFID(),
          fType: form.getType()
        });
      } else if (form.getType() === "long" && state['firstBoss'] === true && state['secondBoss'] === false) {
        return res.render('formEditor', {
          imgScript: '../javascripts/ImageUtility.js',
          mainScript: '../javascripts/MainUtility.js',
          form: form.getImageUri(),
          style: "../stylesheets/editForm.css",
          role: "secondBoss",
          markID: req.cookies["ID"],
          fID: form.getFID(),
          fType: form.getType()
        });
      } else {
        return res.render('formEditor', {
          imgScript: '../javascripts/ImageUtility.js',
          mainScript: '../javascripts/MainUtility.js',
          form: form.getImageUri(),
          style: "../stylesheets/editForm.css",
          role: "personnel",
          markID: req.cookies["ID"],
          fID: form.getFID()
        });
      }
    }
  });

  router.post('/uploadForm', function(req, res) {
    var ID, LSys, dt, fID, fName, form, name, newForm, pNode;
    LSys = LeaveSystemSingleton.get();
    ID = req.cookies["ID"];
    name = sessionManager.getSessionName(ID);
    fName = req.body.name.replace(" ", "");
    debug("upload By:" + name);
    pNode = LSys.getPeopleNodeByName(req.body.deputyName);
    debug(pNode);
    if (pNode === null) {
      return res.send("指定代理人不存在");
    } else if (name === fName) {
      dt = genDate();
      newForm = new LeaveForm(fName, genDate(), req.body.deputyName, req.body.fType);
      newForm.setImageDir("dataPool/forms");
      fID = newForm.getFID();
      urlToImage(newForm.getImagePath(), req.body.image);
      LSys.addNewForm(newForm);
      LSys.submitFormByID(name, fID);
      LSys.showArchitecture();
      return res.redirect("/mainPage");
    } else {
      form = LSys.getFormByFID(req.body.fID);
      if (form !== null) {
        urlToImage(form.getImagePath(), req.body.image);
        LSys.submitFormByID(name, form.getFID());
        LSys.showArchitecture();
        return res.redirect("/mainPage");
      }
    }
  });

  module.exports = router;

  urlToImage = function(path, url) {
    var buf, data;
    data = url.replace(/^data:image\/\w+;base64,/, "");
    buf = new Buffer(data, 'base64');
    fs.writeFile(path, buf);
  };

  genDate = function() {
    var day, dt, h, m, month, sec, year;
    dt = new Date();
    year = dt.getFullYear();
    month = dt.getMonth() + 1;
    day = dt.getDate();
    h = dt.getHours();
    m = dt.getMonth();
    sec = dt.getSeconds();
    return year + "." + month + "." + day + "." + h + "." + m + "." + sec;
  };

}).call(this);
